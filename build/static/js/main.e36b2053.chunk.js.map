{"version":3,"sources":["Card.js","Column.js","modals/CardInfo.js","modals/RecycleInfo.js","App.js","index.js"],"names":["Card","props","handleMenuSelect","e","data","action","handleEdit","newData","card","id","task","content","description","column","toggleModal","draggableId","index","provided","snapshot","className","isDragging","draggableProps","dragHandleProps","ref","innerRef","onDoubleClick","onClick","handleDeleteCard","Column","useState","info","setInfo","title","setTitle","staticTitle","setStaticTitle","inputRef","React","createRef","handleNewCardSelect","handleDeleteListSelect","handleDeleteList","handleStaticToggle","handleInfoChange","target","value","handleSubmit","preventDefault","uuidv4","handleNewCard","useEffect","current","focus","formTitle","onSubmit","handleEditList","prevState","type","onChange","droppableId","isDraggingOver","droppableProps","tasks","map","idx","key","handleEditCard","placeholder","CardInfo","close","addCard","editCard","setContent","setDescription","newCard","htmlFor","name","RecycleInfo","display","recycle","i","columns","taskIds","length","retrieveList","handleRetrieve","removeList","handleRemove","D_COL","columnOrder","App","ls","get","mainData","setMainData","modal","setModal","setRecycle","modalDef","setModalDef","hamburger","setHamburger","set","toggleRecycle","newState","newColumn","splice","indexOf","newTasks","newColumnOrder","filter","newRecycle","push","colId","taskId","newColumns","forEach","newId","handleNewList","onDragEnd","result","destination","source","start","finish","startTaskIds","Array","from","newStart","finishTaskIds","newFinish","newTaskIds","direction","style","width","minWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e36b2053.chunk.js","sourcesContent":["import React from \"react\";\nimport { Draggable } from 'react-beautiful-dnd'\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\"\n\nfunction Card(props) {\n    const handleMenuSelect = (e, data) => {\n        data.action()\n    }\n\n    const handleEdit = () => {\n        let newData = {\n            card: {\n                id: props.task.id,\n                content: props.task.content,\n                description: props.task.description\n            },\n            column: {\n                id: props.column.id\n            }\n        }\n        props.toggleModal(newData)\n    }\n\n    const handleDelete = () => {\n        let newData = {\n            card: {\n                id: props.task.id,\n                content: props.task.content,\n                description: props.task.description\n            },\n            column: {\n                id: props.column.id\n            }\n        }\n        props.handleDeleteCard(newData)\n    }\n\n    return (\n        <>\n            <ContextMenuTrigger id={props.task.id}>\n                <Draggable\n                    draggableId={props.task.id}\n                    index={props.index}\n                >\n                    {(provided, snapshot) => (\n                        <div\n                            className={`t-box ${snapshot.isDragging\n                                ? \"blue\"\n                                : null\n                                }`}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                            onDoubleClick={handleEdit}\n                        >\n                            {/* <div className=\"handle\" {...provided.dragHandleProps} /> */}\n                            {props.task.content}\n                        </div>\n                    )}\n                </Draggable>\n            </ContextMenuTrigger>\n\n            <ContextMenu id={props.task.id} className=\"context-menu\">\n                <MenuItem\n                    className=\"context-item\"\n                    data={{ action: handleEdit, id: props.task.id }}\n                    onClick={handleMenuSelect}\n                >\n                    Edit\n                </MenuItem>\n                <MenuItem\n                    className=\"context-item\"\n                    data={{ action: handleDelete, id: props.task.id }}\n                    onClick={handleMenuSelect}\n                >\n                    Delete\n                </MenuItem>\n            </ContextMenu>\n        </>\n    )\n}\n\nexport default Card","import React, { useState, useEffect } from \"react\";\nimport { Draggable, Droppable } from 'react-beautiful-dnd'\nimport { v4 as uuidv4 } from 'uuid'\nimport Card from \"./Card\"\n\nfunction Column(props) {\n  const [info, setInfo] = useState(\"\")\n  const [title, setTitle] = useState(props.column.title)\n  const [staticTitle, setStaticTitle] = useState(true)\n\n  const inputRef = React.createRef();\n\n  const handleNewCardSelect = () => {\n    setStaticTitle(true)\n    props.toggleModal({ column: { id: props.column.id } })\n  }\n\n  const handleDeleteListSelect = () => {\n    setStaticTitle(true)\n    const newData = {\n      column: {\n        id: props.column.id\n      }\n    }\n    props.handleDeleteList(newData)\n  }\n\n  const handleStaticToggle = () => {\n    setStaticTitle(false)\n  }\n\n  const handleInfoChange = e => {\n    setInfo(e.target.value)\n  }\n\n  const handleChangeTitle = e => {\n    setTitle(e.target.value)\n  }\n\n  const handleTitleSubmit = e => {\n    e.preventDefault()\n    let newData = {\n      column: {\n        id: props.column.id,\n        title\n      }\n    }\n    props.handleEditList(newData)\n    setStaticTitle(prevState => !prevState)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (info === \"\") return\n    let newData = {\n      card: {\n        id: uuidv4(),\n        content: info\n      },\n      column: {\n        id: props.column.id\n      }\n    }\n    props.handleNewCard(newData)\n    setInfo(\"\")\n  }\n\n  useEffect(() => {\n    if (!staticTitle) inputRef.current.focus()\n  }, [staticTitle])\n\n  const formTitle = (\n    <form onSubmit={handleTitleSubmit}>\n      <input ref={inputRef} className=\"col-title-input\" type=\"text\" value={title} onChange={handleChangeTitle}></input>\n    </form>\n  )\n\n  return (\n    <Draggable\n      draggableId={props.column.id}\n      index={props.index}\n    >\n      {(provided) => (\n        <div\n          className=\"column\"\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n        >\n\n          <header {...provided.dragHandleProps} className=\"my-col-head\">\n            {staticTitle\n              ? <h1 className=\"col-title\" onClick={handleStaticToggle}>{props.column.title}</h1>\n              : formTitle\n            }\n            <span className=\"spacer\" />\n            <div className=\"dropdown\">\n              <button className=\"dropbtn\">...</button>\n              <div className=\"dropdown-content\">\n                <div className=\"drop-select\" onClick={handleNewCardSelect}>New Card</div>\n                <div className=\"drop-select\" onClick={handleStaticToggle}>Edit List</div>\n                <div className=\"drop-select\" onClick={handleDeleteListSelect}>Delete List</div>\n              </div>\n            </div>\n          </header>\n\n          <Droppable\n            droppableId={props.column.id}\n            type=\"task\"\n          >\n            {(provided, snapshot) => (\n              <div\n                className={`t-container ${snapshot.isDraggingOver ? \"gray\" : null}`}\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n              >\n                {props.tasks.map((task, idx) => (\n                  <Card\n                    key={task.id}\n                    task={task}\n                    index={idx}\n                    column={props.column}\n                    handleEditCard={props.handleEditCard}\n                    handleDeleteCard={props.handleDeleteCard}\n                    toggleModal={props.toggleModal}\n                  />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n\n          <form className=\"new-card-form\" onSubmit={handleSubmit}>\n            <textarea value={info} onChange={handleInfoChange} placeholder=\"New card...\"></textarea>\n            <button type=\"sumbit\">Submit</button>\n          </form>\n\n        </div>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Column","import React, { useState } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport default function CardInfo({ data, close, addCard, editCard }) {\n    const [content, setContent] = useState(data.card ? data.card.content : \"\")\n    const [description, setDescription] = useState(data.card ? data.card.description : \"\")\n\n    const handleContentChange = e => {\n        setContent(e.target.value)\n    }\n\n    const handleDescriptionChange = e => {\n        setDescription(e.target.value)\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        if (content === \"\") {\n            close()\n            return\n        }\n        if (data.card) {\n            const newCard = {\n                card: {\n                    id: data.card.id,\n                    content,\n                    description\n                }\n            }\n            editCard(newCard)\n        } else {\n            const newData = {\n                card: {\n                    id: uuidv4(),\n                    content,\n                    description\n                },\n                column: {\n                    id: data.column.id\n                }\n            }\n            addCard(newData)\n        }\n        close()\n    }\n\n    return (\n        <div className=\"card-modal-outer\">\n            <div className=\"card-modal-inner\">\n                <form className=\"card-modal-form\" onSubmit={handleSubmit}>\n                    <label htmlFor=\"content\">Enter main content</label>\n                    <textarea name=\"content\" placeholder=\"Content...\" value={content} onChange={handleContentChange}></textarea>\n                    <label htmlFor=\"description\">Enter desctiption</label>\n                    <textarea name=\"description\" placeholder=\"Description...\" value={description} onChange={handleDescriptionChange}></textarea>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n            \n        </div>\n    )\n}","import React from \"react\"\n\nexport default function RecycleInfo(props) {\n    const handleRetrieve = column => {\n        const newData = { column }\n        props.retrieveList(newData)\n        props.close()\n    }\n\n    const handleRemove = column => {\n        const newData = { column }\n        props.removeList(newData)\n    }\n    \n    const display = props.data.recycle.map((id, i) => {\n        let column = props.data.columns[id]\n        return (\n            <div key={i}>\n                <div>{column.title}</div>\n                <div>Cards: {column.taskIds.length}</div>\n                <button onClick={() => handleRetrieve(column)}>Retrieve List</button>\n                <button onClick={() => handleRemove(column)}>Delete List</button>\n            </div>\n        )\n\n    })\n\n    return (\n        <div className=\"card-modal-outer\">\n            <div className=\"card-modal-inner\">\n                {display}\n                <button onClick={props.close}>Close</button>\n            </div>\n        </div>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\"\nimport { v4 as uuidv4 } from 'uuid'\nimport ls from 'local-storage'\nimport Column from \"./Column\";\nimport CardInfo from \"./modals/CardInfo\"\nimport RecycleInfo from \"./modals/RecycleInfo\"\n\nimport \"./styles/style.css\"\n\nconst D_COL = {\n  tasks: {},\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'To Do',\n      taskIds: []\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'In Progress',\n      taskIds: []\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Finished',\n      taskIds: []\n    }\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3'],\n  recycle: []\n}\n\nfunction App() {\n  const [mainData, setMainData] = useState(ls.get(\"mainData\") || D_COL)\n  const [modal, setModal] = useState(false)\n  const [recycle, setRecycle] = useState(false)\n  const [modalDef, setModalDef] = useState()\n  const [hamburger, setHamburger] = useState(false)\n\n  useEffect(() => {\n    ls.set(\"mainData\", mainData)\n  }, [mainData])\n\n  // const onDragStart = () => {\n\n  // }\n\n  // const onDragUpdate = update => {\n  //   const { destination } = update\n  //   const opacity = destination\n  //     ? destination.index / Object.keys(mainData.tasks).length  \n  //     : 0\n  //   document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`\n  //   }\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId, type } = result\n\n    if (!destination) {\n      return\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return\n    }\n\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(mainData.columnOrder)\n      newColumnOrder.splice(source.index, 1)\n      newColumnOrder.splice(destination.index, 0, draggableId)\n\n      const newState = {\n        ...mainData,\n        columnOrder: newColumnOrder\n      }\n      setMainData(newState)\n      return\n    }\n\n    const start = mainData.columns[source.droppableId]\n    const finish = mainData.columns[destination.droppableId]\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds)\n      newTaskIds.splice(source.index, 1)\n      newTaskIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = { ...start, taskIds: newTaskIds }\n\n      const newState = {\n        ...mainData,\n        columns: {\n          ...mainData.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      setMainData(newState)\n      return\n    }\n\n    const startTaskIds = Array.from(start.taskIds)\n    startTaskIds.splice(source.index, 1)\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds)\n    finishTaskIds.splice(destination.index, 0, draggableId)\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    }\n\n    const newState = {\n      ...mainData,\n      columns: {\n        ...mainData.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    }\n\n    setMainData(newState)\n  }\n\n  const toggleModal = newData => {\n    setModalDef(newData ? newData : null)\n    setModal(prevState => !prevState)\n  }\n\n  const toggleRecycle = () => {\n    setRecycle(prevState => !prevState)\n  }\n\n  const handleNewCard = newData => {\n    const newState = {\n      ...mainData,\n      tasks: {\n        ...mainData.tasks,\n        [newData.card.id]: {\n          id: newData.card.id,\n          content: newData.card.content,\n          description: newData.card.description\n        }\n      },\n      columns: {\n        ...mainData.columns,\n        [newData.column.id]: {\n          ...mainData.columns[newData.column.id],\n          taskIds: [\n            ...mainData.columns[newData.column.id].taskIds,\n            newData.card.id\n          ]\n        }\n      }\n    }\n    setMainData(newState)\n  }\n\n  const handleEditCard = newData => {\n    const newState = {\n      ...mainData,\n      tasks: {\n        ...mainData.tasks,\n        [newData.card.id]: {\n          id: newData.card.id,\n          content: newData.card.content,\n          description: newData.card.description\n        }\n      }\n    }\n    setMainData(newState)\n  }\n\n  const handleDeleteCard = newData => {\n    const newColumn = { ...mainData.columns[newData.column.id] }\n    newColumn.taskIds.splice(newColumn.taskIds.indexOf(newData.card.id), 1)\n\n    const newTasks = { ...mainData.tasks }\n    delete newTasks[newData.card.id]\n\n    const newState = {\n      ...mainData,\n      tasks: newTasks,\n      columns: {\n        ...mainData.columns,\n        [newData.column.id]: newColumn\n      }\n    }\n    setMainData(newState)\n  }\n\n  const handleNewList = () => {\n    let newId = uuidv4()\n    const newState = {\n      ...mainData,\n      columns: {\n        ...mainData.columns,\n        [newId]: {\n          id: newId,\n          title: \"Click to Edit\",\n          taskIds: []\n        }\n      },\n      columnOrder: [\n        ...mainData.columnOrder,\n        newId\n      ]\n    }\n    setMainData(newState)\n  }\n\n  const handleEditList = newData => {\n    const newState = {\n      ...mainData,\n      columns: {\n        ...mainData.columns,\n        [newData.column.id]: {\n          ...mainData.columns[newData.column.id],\n          title: newData.column.title\n        }\n      }\n    }\n    setMainData(newState)\n  }\n\n  const handleDeleteList = newData => {\n    const newColumnOrder = [...mainData.columnOrder].filter(id => id !== newData.column.id)\n\n    const newRecycle = [...mainData.recycle]\n    newRecycle.push(newData.column.id)\n\n    const newState = {\n      ...mainData,\n      columnOrder: newColumnOrder,\n      recycle: newRecycle\n    }\n    setMainData(newState)\n  }\n\n  const handleRetrieveList = newData => {\n    const newRecycle = [...mainData.recycle].filter(id => id !== newData.column.id)\n\n    const newColumnOrder = [...mainData.columnOrder]\n    newColumnOrder.push(newData.column.id)\n\n    const newState = {\n      ...mainData,\n      columnOrder: newColumnOrder,\n      recycle: newRecycle\n    }\n    setMainData(newState)\n  }\n\n  const handleRemoveList = newData => {\n    const newRecycle = [...mainData.recycle].filter(id => id !== newData.column.id)\n\n    const newTasks = { ...mainData.tasks }\n    const newColumns = { ...mainData.columns }\n    newColumns[newData.column.id].taskIds.forEach(id => {\n      delete newTasks[id]\n    })\n    delete newColumns[newData.column.id]\n\n    const newState = {\n      ...mainData,\n      tasks: newTasks,\n      columns: newColumns,\n      recycle: newRecycle\n    }\n    setMainData(newState)\n  }\n\n  const toggleHamburger = () => {\n    setHamburger(prevState => !prevState)\n  }\n\n  const handleNewListSelect = () => {\n    setHamburger(false)\n    handleNewList()\n  }\n\n  const handleRecycleSelect = () => {\n    setHamburger(false)\n    toggleRecycle()\n  }\n\n  const handlePreferenceSelect = () => {\n    setHamburger(false)\n  }\n\n  let display = mainData.columnOrder.map((colId, i) => {\n    const column = mainData.columns[colId]\n    const tasks = column.taskIds.map(taskId => mainData.tasks[taskId])\n\n    return (\n      <Column\n        key={column.id}\n        column={column}\n        tasks={tasks}\n        index={i}\n        handleNewCard={handleNewCard}\n        handleEditCard={handleEditCard}\n        handleDeleteCard={handleDeleteCard}\n        handleEditList={handleEditList}\n        handleDeleteList={handleDeleteList}\n        toggleModal={toggleModal}\n      />\n    )\n  })\n\n  return (\n    <div id=\"dashboard\">\n\n      {modal\n        ? (\n          <CardInfo\n            data={modalDef}\n            close={toggleModal}\n            addCard={handleNewCard}\n            editCard={handleEditCard}\n          />\n        ) : null}\n      {recycle\n        ? (\n          <RecycleInfo\n            data={mainData}\n            close={toggleRecycle}\n            retrieveList={handleRetrieveList}\n            removeList={handleRemoveList}\n          />\n        )\n        : null}\n\n      <header className=\"dash-header\">\n        <div className=\"ham-drop\">\n          <div className={`hamburger ${hamburger ? \"ham-active\" : null}`} onClick={toggleHamburger}>\n            <div className=\"ham-line\"></div>\n            <div className=\"ham-line\"></div>\n            <div className=\"ham-line\"></div>\n          </div>\n          <div className={`ham-content ${hamburger ? null : \"ham-content-hide\"}`}>\n            <div className=\"ham-select\" onClick={handleNewListSelect}>New List</div>\n            <div className=\"ham-select\" onClick={handleRecycleSelect}>Recylce Bin</div>\n            <div className=\"ham-select\" onClick={handlePreferenceSelect}>Preferences</div>\n          </div>\n        </div>\n      </header>\n\n      <DragDropContext\n        // onDragStart={onDragStart}\n        // onDragUpdate={onDragUpdate}\n        onDragEnd={onDragEnd}\n      >\n        <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n          {(provided) => (\n            <div\n              className=\"col-container\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {display}\n              <div style={{width: \"300px\", minWidth: \"300px\"}}></div>\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}